name: release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    outputs:
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      releases_created: ${{ steps.semantic.outputs.releases_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Semantic Release
        id: semantic
        run: |
          # Get the latest tag or start from v0.1.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version number and increment patch
          VERSION=$(echo "$LATEST_TAG" | sed 's/v//')
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          NEW_TAG="v${NEW_VERSION}"
          
          echo "New version: $NEW_VERSION"
          echo "New tag: $NEW_TAG"
          
          # Create and push the new tag
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          
          # Set outputs for other jobs
          echo "new_release_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_release_published=true" >> $GITHUB_OUTPUT
          echo "releases_created=" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Debug Output
        run: |
          echo "Semantic release outputs:"
          echo "new_release_version: '${{ steps.semantic.outputs.new_release_version }}'"
          echo "new_release_published: '${{ steps.semantic.outputs.new_release_published }}'"
          echo "releases_created: '${{ steps.semantic.outputs.releases_created }}'"

  linux:
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_version != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Install cross compilers
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu jq
      - name: Build Linux binaries
        run: |
          # Build linux binaries
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-linux-gnu-gcc go build -ldflags="-s -w" -o dist/projector_linux_amd64/projector .
          GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc go build -ldflags="-s -w" -o dist/projector_linux_arm64/projector .
          
          # Create archives
          cd dist
          tar -czf projector_linux_amd64.tar.gz projector_linux_amd64/
          tar -czf projector_linux_arm64.tar.gz projector_linux_arm64/
          cd ..
          
          # Create checksums
          cd dist
          shasum -a 256 *.tar.gz > checksums_linux.txt
          cd ..
      - name: Upload Linux binaries to release (API)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG="v${{ needs.semantic-release.outputs.new_release_version }}"
          OWNER="joelgrimberg"
          REPO="projector"
          
          echo "Ensuring release exists for tag: $TAG"
          
          # Try to fetch existing release
          http_code=$(curl -sS -o /tmp/release.json -w "%{http_code}" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$OWNER/$REPO/releases/tags/$TAG" || true)
          
          if [ "$http_code" = "404" ]; then
            echo "Release not found, creating..."
            curl -sSf -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\":\"$TAG\",\"name\":\"Release $TAG\",\"body\":\"Automated release for $TAG\"}" \
              "https://api.github.com/repos/$OWNER/$REPO/releases" > /tmp/release.json
          elif [ "$http_code" != "200" ]; then
            echo "Unexpected status fetching release: $http_code" >&2
            cat /tmp/release.json >&2 || true
            exit 1
          else
            echo "Release already exists."
          fi
          
          upload_url=$(sed -n 's/.*"upload_url":"\([^"]*\)".*/\1/p' /tmp/release.json | sed 's/{.*}//')
          echo "Upload URL: $upload_url"
          
          # Upload binaries
          for file in dist/projector_linux_amd64.tar.gz dist/projector_linux_arm64.tar.gz; do
            if [ -f "$file" ]; then
              name=$(basename "$file")
              echo "Uploading $name to $TAG"
              curl -sSf -X POST \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Content-Type: application/gzip" \
                --data-binary @"$file" \
                "$upload_url?name=$name" || {
                  echo "Upload failed for $name (might already exist), attempting delete+reupload..."
                  assets_url=$(sed -n 's/.*"assets_url":"\([^"]*\)".*/\1/p' /tmp/release.json)
                  asset_id=$(curl -sS -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "$assets_url" | sed -n "s/.*{\\\"id\\\":\([0-9]*\),\\\"name\\\":\\\"$name\\\".*/\1/p")
                  if [ -n "${asset_id:-}" ]; then
                    curl -sSf -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/$OWNER/$REPO/releases/assets/$asset_id" || true
                    curl -sSf -X POST -H "Authorization: Bearer $GITHUB_TOKEN" -H "Content-Type: application/gzip" --data-binary @"$file" "$upload_url?name=$name"
                  fi
                }
              echo "Uploaded $name"
            else
              echo "Warning: $file not found, skipping upload"
            fi
          done

  darwin:
    runs-on: macos-latest
    needs: [semantic-release, linux]
    if: needs.semantic-release.outputs.new_release_version != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Build macOS binaries
        run: |
          # Build darwin binaries
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -ldflags="-s -w" -o dist/projector_darwin_amd64/projector .
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 go build -ldflags="-s -w" -o dist/projector_darwin_arm64/projector .
          
          # Create archives
          cd dist
          tar -czf projector_darwin_amd64.tar.gz projector_darwin_amd64/
          tar -czf projector_darwin_arm64.tar.gz projector_darwin_arm64/
          cd ..
          
          # Create checksums
          cd dist
          shasum -a 256 *.tar.gz > checksums_darwin.txt
          cd ..
      - name: Upload macOS binaries to release (API)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG="v${{ needs.semantic-release.outputs.new_release_version }}"
          OWNER="joelgrimberg"
          REPO="projector"
          
          echo "Ensuring release exists for tag: $TAG"
          
          # Try to fetch existing release
          http_code=$(curl -sS -o /tmp/release.json -w "%{http_code}" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$OWNER/$REPO/releases/tags/$TAG" || true)
          
          if [ "$http_code" = "404" ]; then
            echo "Release not found, creating..."
            curl -sSf -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\":\"$TAG\",\"name\":\"Release $TAG\",\"body\":\"Automated release for $TAG\"}" \
              "https://api.github.com/repos/$OWNER/$REPO/releases" > /tmp/release.json
          elif [ "$http_code" != "200" ]; then
            echo "Unexpected status fetching release: $http_code" >&2
            cat /tmp/release.json >&2 || true
            exit 1
          else
            echo "Release already exists."
          fi
          
          upload_url=$(sed -n 's/.*"upload_url":"\([^"]*\)".*/\1/p' /tmp/release.json | sed 's/{.*}//')
          echo "Upload URL: $upload_url"
          
          # Upload binaries
          for file in dist/projector_darwin_amd64.tar.gz dist/projector_darwin_arm64.tar.gz; do
            if [ -f "$file" ]; then
              name=$(basename "$file")
              echo "Uploading $name to $TAG"
              curl -sSf -X POST \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Content-Type: application/gzip" \
                --data-binary @"$file" \
                "$upload_url?name=$name" || {
                  echo "Upload failed for $name (might already exist), attempting delete+reupload..."
                  assets_url=$(sed -n 's/.*"assets_url":"\([^"]*\)".*/\1/p' /tmp/release.json)
                  asset_id=$(curl -sS -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "$assets_url" | sed -n "s/.*{\\\"id\\\":\([0-9]*\),\\\"name\\\":\\\"$name\\\".*/\1/p")
                  if [ -n "${asset_id:-}" ]; then
                    curl -sSf -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/$OWNER/$REPO/releases/assets/$asset_id" || true
                    curl -sSf -X POST -H "Authorization: Bearer $GITHUB_TOKEN" -H "Content-Type: application/gzip" --data-binary @"$file" "$upload_url?name=$name"
                  fi
                }
              echo "Uploaded $name"
            else
              echo "Warning: $file not found, skipping upload"
            fi
          done
      - name: Generate Homebrew formula
        run: |
          set -euo pipefail
          TAG="v${{ needs.semantic-release.outputs.new_release_version }}"
          
          # Ensure Linux tarballs are available locally to compute checksums
          mkdir -p dist
          echo "Downloading Linux tarballs for checksum computation..."
          curl -fSL --retry 5 --retry-delay 2 -o dist/projector_linux_amd64.tar.gz "https://github.com/joelgrimberg/projector/releases/download/${TAG}/projector_linux_amd64.tar.gz"
          curl -fSL --retry 5 --retry-delay 2 -o dist/projector_linux_arm64.tar.gz "https://github.com/joelgrimberg/projector/releases/download/${TAG}/projector_linux_arm64.tar.gz"
          
          if [ ! -f dist/projector_linux_amd64.tar.gz ] || [ ! -f dist/projector_linux_arm64.tar.gz ]; then
            echo "Linux tarballs not found after download attempts; aborting formula generation." >&2
            ls -lah dist || true
            exit 1
          fi
          
          MAC_AMD_SHA=$(shasum -a 256 dist/projector_darwin_amd64.tar.gz | awk '{print $1}')
          MAC_ARM_SHA=$(shasum -a 256 dist/projector_darwin_arm64.tar.gz | awk '{print $1}')
          LINUX_AMD_SHA=$(shasum -a 256 dist/projector_linux_amd64.tar.gz | awk '{print $1}')
          LINUX_ARM_SHA=$(shasum -a 256 dist/projector_linux_arm64.tar.gz | awk '{print $1}')
          
          mkdir -p dist/homebrew/Formula
          cat > dist/homebrew/Formula/projector-cli.rb << EOF
          class ProjectorCli < Formula
            desc "A CLI application for project and action management"
            homepage "https://github.com/joelgrimberg/projector"
            version "${{ needs.semantic-release.outputs.new_release_version }}"
            license "MIT"
            
            on_macos do
              if Hardware::CPU.arm?
                url "https://github.com/joelgrimberg/projector/releases/download/${TAG}/projector_darwin_arm64.tar.gz"
                sha256 "${MAC_ARM_SHA}"
              else
                url "https://github.com/joelgrimberg/projector/releases/download/${TAG}/projector_darwin_amd64.tar.gz"
                sha256 "${MAC_AMD_SHA}"
              end
            end
            
            on_linux do
              if Hardware::CPU.arm?
                url "https://github.com/joelgrimberg/projector/releases/download/${TAG}/projector_linux_arm64.tar.gz"
                sha256 "${LINUX_ARM_SHA}"
              else
                url "https://github.com/joelgrimberg/projector/releases/download/${TAG}/projector_linux_amd64.tar.gz"
                sha256 "${LINUX_AMD_SHA}"
              end
            end
            
            def install
              bin.install "projector"
            end
            
            test do
              system "#{bin}/projector", "--version"
            end
          end
          EOF
      - name: Push Homebrew formula to tap
        env:
          TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          rm -rf tap
          git clone https://x-access-token:${TAP_TOKEN}@github.com/joelgrimberg/homebrew-tap.git tap
          
          # Remove old cask file if it exists
          rm -f tap/Casks/projector.rb
          
          # Create Formula directory and add new formula
          mkdir -p tap/Formula
          cp dist/homebrew/Formula/projector-cli.rb tap/Formula/projector-cli.rb
          
          cd tap
          git add Formula/projector-cli.rb
          git rm -f Casks/projector.rb 2>/dev/null || true
          
          if git diff --cached --quiet; then
            echo "No formula changes to commit."
          else
            git commit -m "Update projector-cli formula for ${{ needs.semantic-release.outputs.new_release_version }}"
            git push https://x-access-token:${TAP_TOKEN}@github.com/joelgrimberg/homebrew-tap.git HEAD:main
          fi