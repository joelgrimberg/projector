name: release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    outputs:
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      releases_created: ${{ steps.semantic.outputs.releases_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Semantic Release
        id: semantic
        run: |
          # Get the latest tag or start from v0.1.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version number and increment patch
          VERSION=$(echo "$LATEST_TAG" | sed 's/v//')
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          NEW_TAG="v${NEW_VERSION}"
          
          echo "New version: $NEW_VERSION"
          echo "New tag: $NEW_TAG"
          
          # Create and push the new tag
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          
          # Set outputs for other jobs
          echo "new_release_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_release_published=true" >> $GITHUB_OUTPUT
          echo "releases_created=" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Debug Output
        run: |
          echo "Semantic release outputs:"
          echo "new_release_version: '${{ steps.semantic.outputs.new_release_version }}'"
          echo "new_release_published: '${{ steps.semantic.outputs.new_release_published }}'"
          echo "releases_created: '${{ steps.semantic.outputs.releases_created }}'"

  linux:
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_version != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Install cross compilers
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu jq
      - name: Build Linux binaries
        run: |
          # Build linux binaries
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-linux-gnu-gcc go build -ldflags="-s -w" -o dist/projector_linux_amd64/projector .
          GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc go build -ldflags="-s -w" -o dist/projector_linux_arm64/projector .
          
          # Create archives
          cd dist
          tar -czf projector_linux_amd64.tar.gz projector_linux_amd64/
          tar -czf projector_linux_arm64.tar.gz projector_linux_arm64/
          cd ..
          
          # Create checksums
          cd dist
          shasum -a 256 *.tar.gz > checksums_linux.txt
          cd ..
      - name: Upload Linux binaries to release (API)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG="v${{ needs.semantic-release.outputs.new_release_version }}"
          OWNER="joelgrimberg"
          REPO="projector"
          release_json=$(curl -sSf -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" https://api.github.com/repos/$OWNER/$REPO/releases/tags/$TAG)
          upload_url=$(echo "$release_json" | jq -r '.upload_url' | sed 's/{.*}//')
          for file in dist/projector_linux_amd64.tar.gz dist/projector_linux_arm64.tar.gz; do
            name=$(basename "$file")
            echo "Uploading $name to $TAG"
            curl -sSf -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/gzip" \
              --data-binary @"$file" \
              "$upload_url?name=$name" || echo "Upload failed for $name (might already exist)"
          done

  darwin:
    runs-on: macos-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_version != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Build macOS binaries
        run: |
          # Build darwin binaries
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -ldflags="-s -w" -o dist/projector_darwin_amd64/projector .
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 go build -ldflags="-s - w" -o dist/projector_darwin_arm64/projector .
          
          # Create archives
          cd dist
          tar -czf projector_darwin_amd64.tar.gz projector_darwin_amd64/
          tar -czf projector_darwin_arm64.tar.gz projector_darwin_arm64/
          cd ..
          
          # Create checksums
          cd dist
          shasum -a 256 *.tar.gz > checksums_darwin.txt
          cd ..
      - name: Upload macOS binaries to release (API)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG="v${{ needs.semantic-release.outputs.new_release_version }}"
          OWNER="joelgrimberg"
          REPO="projector"
          release_json=$(curl -sSf -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" https://api.github.com/repos/$OWNER/$REPO/releases/tags/$TAG)
          upload_url=$(echo "$release_json" | jq -r '.upload_url' | sed 's/{.*}//')
          for file in dist/projector_darwin_amd64.tar.gz dist/projector_darwin_arm64.tar.gz; do
            name=$(basename "$file")
            echo "Uploading $name to $TAG"
            curl -sSf -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/gzip" \
              --data-binary @"$file" \
              "$upload_url?name=$name" || echo "Upload failed for $name (might already exist)"
          done
      - name: Generate Homebrew formula
        run: |
          mkdir -p dist/homebrew/Formula
          cat > dist/homebrew/Formula/projector-cli.rb << 'EOF'
          class ProjectorCli < Formula
            desc "A CLI application for project and action management"
            homepage "https://github.com/joelgrimberg/projector"
            version "${{ needs.semantic-release.outputs.new_release_version }}"
            license "MIT"
            
            on_macos do
              if Hardware::CPU.arm?
                url "https://github.com/joelgrimberg/projector/releases/download/v#{version}/projector_darwin_arm64.tar.gz"
                sha256 "$(shasum -a 256 dist/projector_darwin_arm64.tar.gz | cut -d' ' -f1)"
              else
                url "https://github.com/joelgrimberg/projector/releases/download/v#{version}/projector_darwin_amd64.tar.gz"
                sha256 "$(shasum -a 256 dist/projector_darwin_amd64.tar.gz | cut -d' ' -f1)"
              end
            end
            
            on_linux do
              if Hardware::CPU.arm?
                url "https://github.com/joelgrimberg/projector/releases/download/v#{version}/projector_linux_arm64.tar.gz"
                sha256 "$(shasum -a 256 dist/projector_linux_arm64.tar.gz | cut -d' ' -f1)"
              else
                url "https://github.com/joelgrimberg/projector/releases/download/v#{version}/projector_linux_amd64.tar.gz"
                sha256 "$(shasum -a 256 dist/projector_linux_amd64.tar.gz | cut -d' ' -f1)"
              end
            end
            
            def install
              bin.install "projector"
            end
            
            test do
              system "#{bin}/projector", "--version"
            end
          end
          EOF
      - name: Push Homebrew formula to tap
        env:
          TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          rm -rf tap
          git clone https://x-access-token:${TAP_TOKEN}@github.com/joelgrimberg/homebrew-tap.git tap
          
          # Remove old cask file if it exists
          rm -f tap/Casks/projector.rb
          
          # Create Formula directory and add new formula
          mkdir -p tap/Formula
          cp dist/homebrew/Formula/projector-cli.rb tap/Formula/projector-cli.rb
          
          cd tap
          git add Formula/projector-cli.rb
          git rm -f Casks/projector.rb 2>/dev/null || true
          
          if git diff --cached --quiet; then
            echo "No formula changes to commit."
          else
            git commit -m "Update projector-cli formula for ${{ needs.semantic-release.outputs.new_release_version }}"
            git push https://x-access-token:${TAP_TOKEN}@github.com/joelgrimberg/homebrew-tap.git HEAD:main
          fi